# SWEN Observability Stack
# Prometheus, Grafana, and monitoring components

version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: swen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./swen-alerts.yml:/etc/prometheus/swen-alerts.yml
      - ./ai-routing-rules.yml:/etc/prometheus/ai-routing-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: swen-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=swen-admin-2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - swen-monitoring
    depends_on:
      - prometheus

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: swen-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Custom Metrics Exporter for SWEN
  swen-metrics-exporter:
    image: python:3.9-slim
    container_name: swen-metrics-exporter
    ports:
      - "9091:9090"
    volumes:
      - ./metrics-exporter:/app
    working_dir: /app
    command: python metrics_exporter.py
    environment:
      - PROMETHEUS_PORT=9090
      - AI_ENGINE_URL=http://ai-engine:8080
      - DASHBOARD_URL=http://dashboard:3000
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Cost Exporter - Cloud cost metrics
  cost-exporter:
    image: python:3.9-slim
    container_name: swen-cost-exporter
    ports:
      - "9118:9090"
    volumes:
      - ./cost-exporter:/app
      - ./config/aws-credentials:/root/.aws:ro
      - ./config/alibaba-credentials:/root/.aliyun:ro
    working_dir: /app
    command: python cost_exporter.py
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - ALIBABA_ACCESS_KEY_ID=${ALIBABA_ACCESS_KEY_ID}
      - ALIBABA_ACCESS_KEY_SECRET=${ALIBABA_ACCESS_KEY_SECRET}
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Alertmanager - Alert handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: swen-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: swen-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    container_name: swen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Elasticsearch - Log storage and analysis
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: swen-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Kibana - Log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: swen-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - swen-monitoring

  # Logstash - Log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: swen-logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config:/usr/share/logstash/config
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - swen-monitoring

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  redis_data:
  elasticsearch_data:

networks:
  swen-monitoring:
    driver: bridge
